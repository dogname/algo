#+options: html-link-use-abs-url:nil html-postamble:auto html-preamble:t
#+options: html-scripts:t html-style:t html5-fancy:nil tex:t toc:2 email:t author:t
#+html_doctype: xhtml-strict
#+html_container: div
#+description:
#+keywords:
#+html_link_home:
#+html_link_up:
#+html_mathjax:
#+html_head: <link rel="stylesheet" type="text/css" href="/home/ticks/Public/org_style.css" />
#+html_head_extra:
#+subtitle:
#+infojs_opt:
#+title: 贪心算法(greedy algorithm)
#+author: ticks
#+email: xiehuiwu1996@gmail.com
#+latex_header:

* 活动选择问题 
  有一个集合活动的集合 S={a_1, a_2, $\cdots$, a_n}, 每个活动 a_i 都有一个开始时间 s_i 和一个结束时间 f_i, a_i 发生在 [s_i, f_i), 若两个活动的发生时间没有交集, 称它们是兼容的.
我们希望选出最大兼容活动集
** 最优子结构
假设集合 $S_{ij}$ 的最大兼容子集 $A_{ij}$ 包含活动 $a_k$, 那么 $S_{ij}$ 包含 $S_{ik}, S_{kj}$ 的最大兼容子集.
大小
$$c[i][j] = \begin{cases}0, &S_{ij}=\emptyset\\
max_{a_k\in S_{ij}}\{ c[i][k] + c[k][j] +1 \}, &S_{ij}\neq\emptyset \end{cases}$$ 

** 贪心选择
选择最早结束的活动
#+begin_quote
假设 S 的最大兼容子集 A, A 中最早结束的活动 $a_m$, S 中最早结束的活动 $a_i$. 若 $a_i = a_m$, 选择最早结束的活动可以选到. 若 $a_i \neq a_m$ 可以替换 $a_i$ 与 $a_m$, 易知 $a_i$ 与 A 中其它的活动兼容,
替换后的子集仍然是最大兼容子集 
#+end_quote

** 递归贪心算法

s 开始时间的集合, f 结束时间的集合, n 个活动

#+begin_example
  RECURSIVE-ACTIVITY-SELECTOR(s, f, k, n)
  1   m = k + 1
  2   while s[m] < f[k] and m <= n // 找到最早结束的兼容活动
  3       ++m
  4   if m <= n
  5       return {a_m} ∪ RECURSIVE-ACTIVITY-SELECTOR(s, f, m, n)
  6   return {}
#+end_example

** 迭代贪心算法

#+begin_example
  GREEDY-ACTIVITY-SELECTOR(s,f,n)
  1   A = {a_1}
  2   k = 1
  3   for m = 2 to n
  4       if s[m] >= f[k]
  5           A += a_m
  6           k = m
  7   return A
#+end_example

** 练习
*** 动态规划算法
#+begin_example
  f[0] = 0
  s[n+1] = inf
  DP-ACTIVITY-SELECTOR(s, f, n)
  1   let c[0...n][1...n+1] be a new array
  2   let A bew a new emptyset
  3   for i = 0 to n
  4       c[i][i+1] = 0
  5   for l = 2 to n + 1
  6      for i = 0 to n - l
  7          j = i + l
  8          c[i][j] = 0;
  9          if f[i] <= s[j]
  10             for k = i + 1 to j - 1
  11                 tmp = c[i][k] + c[k][j] + 1
  12                 index;
  13                 if tmp > c[i][j]
  14                     c[i][k] = tmp
  15                     index = k
  16             A = A ∪ a_{index}
  17  return c[0][n+1] and A
#+end_example

复杂度 $O(n^3)$
*** 另一种贪心方法
证明与选最早结束的活动几乎相同
    活动以按开始时间排好序
#+begin_example
  GREEDY-ACTIVITY-SELECTOR(s,f,n)
  1   A = {a_n}
  2   k = n
  3   for m = n - 2 to 1
  4       if f[m] <= s[k]
  5           A += a_m
  6           k = m
  7   return A
#+end_example

*** 不是所有的贪心方法都可以得到最优解
**** 选最短的
| i   | 1 | 2 | 3 |  4 |
|-----+---+---+---+----|
| s_i | 1 | 3 | 5 | 10 |
| f_i | 4 | 6 | 9 | 13 |
**** 最早开始
| i   |  1 | 2 | 3 |
|-----+----+---+---|
| s_i |  1 | 2 | 6 |
| f_i | 10 | 5 | 9 |

*** 区间图着色
申请教室数组 room, 按开始时间分配教室, 若 room 中有教室空闲, 分配该空闲教室. 若 room 中教室没有空闲, 新申请一个教室加入 room, 并分配.
*** 动态规划算法
#+begin_example
  MAXV-ACTICITY-SECECTOR(s,f,v,n)
  1   let V[0...n][1...n+1] and select[0...n][1...n+1] be new arrays
  2   for i = 0 to n
  3       V[i][i + 1] = 0 
  4   for l = 2 to n
  5       for i = 0 to n - l
  6           j = n + l
  7           V[i][j] = 0
  8           if f[i] <= s[j]
  9               for k = i + 1 to j - 1
  10                  tmp = V[i][k] + V[k][j] + v[k]
  11                  if tmp > V[i][j]
  12                      V[i][j] = tmp
  13                      select[i][j] = k
  14  return V[0][n+1] and select
#+end_example

* 贪心算法原理
** 贪心对动态规划
1. 0-1 背包问题
2. 分数背包问题
** 练习
*** 证明: 分数背包问题具有贪心选择性质
#+begin_quote
假定背包中以经装了价值最高的商品, 若没有装完单价最高的商品, 可以将单价最高的商品与背包中商品替换, 这样不会降低背包的价值
#+end_quote
*** 求解 0-1 背包问题
#+begin_example
  ZERO-ONE-KNAPSACK(v, w, n, W)
  1   let p[1...n][0...W] and t[1...n][0...W] be new arrays
  2   for i = 0 to W
  5       if w[1] < W
  6           p[1][i] = v[i]
  7           t[1][i] = 1
  8  for i = 2 to n
  9      for j = 0 to W
  10         p[i][w]=p[i-1][w]
  11         t[i][w]=false
  12         if w[i] < j
  13             tmp = p[i-1][j-w[i]] + v[i]
  14             if tmp > p[i][w]
  15                p[i][w] = tmp
  16                t[i][w] = true
  17  return p[n][W] and t

  GOODS-KNAPSACK(t, i, weight, pack)
  1   if i == 0 or weight == 0
  2       return
  3   if t[i][weight]
  4       pack.add[i]
  5       GOODS-KNAPSACK(t, i -1, weight-w[i], pack)
  6   else
  7       GOODS-KNAPSACK(t, i -1, weight, pack)
#+end_example
*** 商品顺序重量递增, 价值递减
按价值递增序拿, 直到装不下
*** 长跑补水
水足够到达下一个补水点就不补水
*** 求包含点集的单位长度闭区间的最小集合
用不重叠的区间,由小到大
*** O(n) 分数背包问题
不需要完全排序, 只需要足够大并且背包能装下, 用分组的方法 全集 O
主元 m, G{a_i:avg_i>m, a_i $\in$ O}, P=O-G, W_G, W_P
1. W < W_G, O=G. 递归调用
2. W_G <= W <= W_G+W_P. 装 G, W=W-W_G, O=P, 递归调用
*** A,B .最大化 $\Pi\limits_{i=1}^{n}a_i^{b_i}$
相同的大小排序
* 赫夫曼编码
** 前缀码(prefix code)
没有任何码字是其它码字的前缀, 与其它字符编码相比拥有最优数据压缩率
*** 编码
将字符的码字连起来就可 nyw
*** 解码
    用一个二叉树来表示编码
** 构造赫夫曼编码

#+begin_example
HUFFMAN(C)
1   n = C.size
2   用 C初始化最小优先队列Q
3   for i = 1 to n-1
4       z = new node
5       z.left = x = EXTRACT-MIN(Q)
6       z.right = y = EXTRACT-MIN(Q)
7       z.freq = x.freq + y.freq
8       INSERT(Q,z)
9  return Q
#+end_example

** 证明算法正确性

*** 引理 1
#+begin_quote
文件最优编码对应一个满二叉树
#+end_quote
证明:
#+begin_quote
假设 T 是一个不满的对应最优前缀码. 其中节点 x 只有一个孩子. 用 x 的子树代替 x, x 的子树所有节点深度减一. 代价下将. 与 T 是最优前缀码矛盾 
#+end_quote
*** 引理 2
#+begin_quote
若 x 和 y 是频率最小的两个字符, 那么存在最优编码树 T, x 和 y 是最深的叶子节点.
#+end_quote
*** 引理 3
#+begin_quote
节点拆分之后的树是新字符集的最优编码
#+end_quote

** 练习
*** 求证 $x.freq=b.freq\rightarrow a.freq=b.freq=x.freq=y.freq$
$$\begin{aligned}& \because x.freq \leqslant y.freq, a.freq\leqslant b.freq \text{且 x,y 的频率是最小的}, \\
&\therefore x.freq\leqslant a.freq\leqslant b.freq\\
&\text{又} \because x.freq = b.freq\\
&\therefore x.freq = a.freq = b.freq. and b.freq \geqslant y.freq\geqslant x.freq\\
&\therefore x.freq = a.freq = b.freq = y.freq\\
\end{aligned}$$
*** 引理 1
*** 斐波那契数列的赫夫曼编码
    第 i 个的编码
$$\underbrace{1\cdots 1}_{n-i}0, i\neq 1$$
$$\underbrace{1\cdots 1}_{n-1}, i\neq 1$$
