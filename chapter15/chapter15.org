#+html_head: <link rel="stylesheet" type="text/css" href="/home/ticks/Public/org_style.css" />
#+options: creator:t author:t email:t toc:2
#+author: ticks
#+title: 动态规划(dynamic programing)
#+email: xiehuiwu1996@gmail.com
* 钢条切割
给长度为 n 的钢条和一个价格表 $p_i$, 如何切割收益最大
** 普通递归
收益 $r_n=max(r_i+r_{n-i})$
#+BEGIN_EXAMPLE
CUT-ROD(p, n)
1   if n == 0
2       return 0
3   q = -1
4   for i = 1 to n
5       q = max(q, p[i] + CUT-ROD(p, n-i))
6   return q
#+END_EXAMPLE
$$T(n)=1+\sum_{i=0}^{n-1}T(i) = 2^n$$

** 动规
#+BEGIN_EXAMPLE
CUT-ROD(p, n, r)
1   if r[n] > 0
2       return r[n]
3   if n == 0
4      return 0
5   q = 0
6   for i = 1 to n
7       q = max(q, p[i] + CUT-ROD(p, n-i))
8   r[n] = q
9   return q
#+END_EXAMPLE

或者
#+BEGIN_EXAMPLE
CUT-ROD(p, n)
1   let r[1...n] be a new array
2   r[0] = 0
3   for i = 1 to n
4       q = 0
6       for j = 1 to i
7           q = max(q, p[j] + r[i-j])
8       r[i] = q
9   return r[n]
#+END_EXAMPLE

** 子问题图
#+BEGIN_SRC dot :cmdline -T png -Kdot :file subG.png
  digraph G{
    4->3->2->1->0
    4->2
    4->1
    4->0
    3->1
    3->0
    2->0
  }
#+END_SRC

#+RESULTS:
[[file:subG.png]]

** 练习
*** 
$T(0)=1=2^0$
假设 n 小于 N 的时候满足 $T(n)=2^n$
则$$T(N)=1+\sum_{j=0}^{N-1}T(j)=1+\sum_{j=0}^{N-1}2^j=1+(2^N-1)=2^N$$
*** 
$p = {0.5, 1, 1.5, 12, 20}, n =8$

贪心结果 5+3, 收益 20+1.5=21.5

最优 4+4, 收益 12+12=24
***  
#+BEGIN_EXAMPLE
CUT-ROD(p, n, cost)
1   let r[1...n] be a new array
2   r[0] = 0
3   for i = 1 to n
4       q = 0
6       for j = 1 to i - 1
7           q = max(q, p[j] + r[i - j] - cost)
8       if(q < p[i] 
9           q = p[i]
10      r[i] = q
11  return r[n]
#+END_EXAMPLE

*** 
略
*** 
#+BEGIN_EXAMPLE
fbi(n)
1   res[3] = {1, 1, 2}
2   for(int i = 3; i < n; ++i)
3       res[i % 3] = res[(i + 1) % 3]+res[(i + 2) % 3]
4   return res[(n - 1) % 3]
#+END_EXAMPLE

#+BEGIN_SRC dot :file fbi.png :cmdline -Tpng -Kdot
  digraph G{
    6->5
    6->4
    5->4
    5->3
    4->3->2
    4->2
    3->1
    }
#+END_SRC

#+RESULTS:
[[file:fbi.png]]

n 个顶点, 2n-4 条边

* 矩阵链乘法
$A_{p\times q}\cdot B_{q\times r}=C_{p\times r}$ 用标量乘法的次数来表复杂度的话, 该矩阵乘法的代价 $pqr$
** 动态规划
1. 递归公式 $m_{i,j}$ 表示 $A_iA_{i+1}\cdots A_j$ 的代价
\[m_{i,j}=\begin{cases}0,&i=j\\min\{m_{i,k}+m_{k+1,j}+p_{i-1}p_kp_j\},&i< j\end{cases}\]

#+BEGIN_EXAMPLE
  MATRIX-CHAIN-ORDER(p)
  1   n = p.length - 1
  2   let m[1,2,...,n;1,2,...n] and s[1,2,...,n-1;2,3,...,n] be a new array
  3   for i = 1 to n
  4       m[i, i] = 0
  5   for l = 2 to n
  6       for i = 1 to n - l + 1
  7           j = i + l - 1
  8           m[i, j] = ∞
  9           for k = 1 to j - 1
  10              q = m[i, k] + m[k + 1, j] + p_{i-1}p_kp_j
  11              if q < m[i, j]
  12                  m[i, j] = q
  13                  s[i, j] = k
  14   return m and s
#+END_EXAMPLE

** 练习
*** 
$$((A_1A_2)((A_3A_4)(A_5A_6)))$$
*** 
#+BEGIN_EXAMPLE
MATRIX-MULTIPLY(A, B)
1   if A.cols != B.rows
2       error "维度错误"
3   else let C be a new A.rows X B.cols matrix initialise with 0
4       for i  = 1 to A.rows
5           for j = 1 to B.cols
6               for k = 1 to A.cols
7                   C[i][j] += A[i][k]*B[k][j]
8   return C

MATRIX-CHAIN-MULTIPLY(A, s, i, j)
1   if i == j
2       return A[i]
3   return MATRIX-MULTIPLY(MATRIX-CHAIN-MULTIPLY(A, s, i, s[i][j]), MATRIX-CHAIN-MULTIPLY(A, s, i, s[i][j]))
#+END_EXAMPLE

*** 
$$P(n+1) = \sum_{j=0}^{n}P(j)P(n+1-j)=P(n)+\sum_{j=1}^{n-1}P(j)P(n+1-j)\geqslant P(n)+\sum_{j=1}^{n-1}P(j)P(n-j)=2P(n)\geqslant 2*2^n=2^{n+1}$$
*** 
略
*** 
\[\sum_{i=1}^{n}\sum_{j=1}^{n}R(i,j)=\sum_{l=2}^{n}\sum_{i=1}^{n-l-1} 2(l-1)=_{k=l-1}\sum_{k=1}^{n-1}2nk-2k^2=\frac{n^3-n}{3}\]
    

*** 
一对括号意为着一次乘法, n 个元素需要 n-1 次乘法, 需要 n-1 对括号
* 动态规划原理
** 最优子结构
*** 无权最短路径是有最优子结构的
*** 无权最长路径没有最优子结构
** 重叠子问题
** 重构最优解
** 备忘

** 练习
*** 
穷举法书上给的下限为 $\Omega(\dfrac{4^n}{n^{3/2}})$

分治法

时间复杂度的递推公式
$$T(n)=\sum_{k=1}^{n-1}(T(k)+T(n-k)+O(1))+O(1)\leqslant 2\sum_{k=1}^{n-1}T(k)+a(n-1)+b$$
假设 $T(n)=O(3^n)$

可以假设 $T(N)\leqslant c3^n-d$, T(1)是常数,只要 C 足够大就行

假设 $k\in[1,n-1]$ 都满足 $T(k)\leqslant c3^n-d$, 则


$$\begin{aligned}T(n) &\leqslant 2\sum_{k-1}^{n-1}T(k)+a(n-1)+b \\&\leqslant 2\sum_{k=1}^{n-1}(c3^n-d)+a(n-1)+b \\&= c3^n-3c-2d(n-1)+a(n-1)+b\end{aligned}$$


取$d=a/2, c>\frac{b+d}{3}=\frac{2b+a}{6}$
$$T(n)\leqslant c3^n-d=O(3^n)$$
所以,分治法更有效率一点
*** 
#+BEGIN_SRC dot :file recursivetree.png :cmdline -Tpng -Kdot
  digraph G{
    a[label="1...16"]
    b[label="1...8"]
    c[label="9...16"]
    d[label="1...4"]
    e[label="5...8"]
    f[label="9...12"]
    g[label="13...16"]
    h[label="1...2"]
    i[label="3...4"]
    j[label="5...6"]
    k[label="7...8"]
    l[label="9...10"]
    m[label="11...12"]
    n[label="13...14"]
    o[label="15...16"]
    a->b
    a->c
    b->d
    b->e
    c->f
    c->g
    d->h
    d->i
    e->j
    e->k
    f->l
    f->m
    g->n
    g->o
    h->1
    h->2
    i->3
    i->4
    j->5
    j->6
    k->7
    k->8
    l->9
    l->10
    m->11
    m->12
    n->13
    n->14
    o->15
    o->16
  }
#+END_SRC

#+RESULTS:
[[file:recursivetree.png]]

这些子问题都没有重叠.
*** 
    有
*** 
p={5,6,8,4,3}
最优 $(A_1(A_2(A_3A_4)))$

Capulet 教授的方法

setp1. $((A_1A_2A_3)A_4)$

step2. $((A_1(A_2A_3))A_4)$
*** 
假设经过了中间货币 k , 那么 $R_{ij}=R_{ik}*R_{kj}$
若 $R_{ik} or R_{kj}$ 不是最优的,可以用更好的替换
* 最长公共子序列
** 子序列
一个序列 X=<x_1,x_2,$\cdots$,x_n}, 与另一个序列 Y=<y_1,y_2,$\cdots$,y_m} ,m < n; 若存在严格递增的下标序列 I<i_1,i_2,i$\cdots$,i_k>, 使得
x_{i_j}=y_j, $\forall$ j $\in$ I. 称 Y 是 X 的子序列
** 公共子序列
若 Z 同时是 X 和 Y 的子序列, 称 Z 是 X 和 Y 的公共子序列

** 最长公共子序列 (longest-common-subsequebce, LCS) 问题
*** 最优子结构
设 $Z_k=LCS(X_m, Y_n)$.
$$\begin{cases}x_m=y_n, &Z_{k-1}=LCS(X_{m-1}, Y_{n-1})\\
x_m\neq y_n,&\begin{cases}
                          z_k\neq x_m, Z = LCS(X_{m-1}, Y_n)\\
                          z_k\neq y_n, Z = LCS(X_m,Y_n)
             \end{cases}
\end{cases}$$

#+BEGIN_SRC C++ -n 
  void lcsSolver(string& X, string& Y, vector<vector<int>>& c)
  {
    int m = X.size();
    int n = Y.size();
    for (int i = 0; i <= m; ++i) c[i][0] = 0;
    for (int j = 1; j <= n; ++j) c[0][j] = 0;
    for (int i = 1; i <= m; ++i)
      for (int j = 1; j <= n; ++j)
      {
        if (X[i - 1] == Y[j - 1])
          c[i][j] = c[i - 1][j - 1] + 1;
        else
          c[i][j] = c[i - 1][j] < c[i][j - 1] ? c[i][j - 1] : c[i - 1][j];
      }
  }

  void printLCS(string& X, vector<vector<int>>& c, int i, int j)
  {
    if (i == 0 || j == 0) return;
    if (c[i][j] != c[i - 1][j] && c[i][j] != c[i][j - 1])
    {
      printLCS(X, c, i - 1, j - 1);
      cout << X[i - 1];
    }
    else if (c[i][j] == c[i - 1][j])
      printLCS(X, c, i - 1, j);
    else
      printLCS(X, c, i, j - 1);
  }
#+END_SRC

** 练习
*** 
<1,0,1,0,1,0>
*** 
见上面的 C++ 代码
*** 
#+BEGIN_EXAMPLE
MEMOIZED-LCS-LENGTH(X,Y)
1   n = X.length
2   m = Y.length
3   let c[0...n,0...m] be a new matrix and initialise with -1
4   return MEMOIZED-LCS-LENGTH-AUX(X, Y, c, n, m)

MEMOIZED-LCS-LENGTH-AUX(X, Y, c, i, j)
1   if c[i][j] >= 0 
2       return c[i][j]
3   if i==0 or j==0
4       c[i][j] = 0
5   elseif X[i] == Y[j]
6       c[i][j] == MEMOIZED-LCS-LENGTH-AUX(X, Y, c, i - 1, j - 1)
7   else
8       c[i][j] == max(MEMOIZED-LCS-LENGTH-AUX(X, Y, c, i - 1, j), MEMOIZED-LCS-LENGTH-AUX(X, Y, c, i, j - 1))
9   return c[i][j]
#+END_EXAMPLE
*** 
因为计算 C[i][j] 只需要本层数据和上层数据, 可以循环利用 cur 层 和 pre 层, 这样只需要 2min(m,n), 哪个元素多, 哪个优先

更进一步, c[i][j] 只需要上层数据和 C[i][j-1], 只需要一层和保存 c[i][j-1]的额外空间

*** 
   
#+BEGIN_EXAMPLE
MAX-LENGTH-SUBSQUEUE(A)
1   n = A.length
2   let L[1,...n] and P[1,...,n] be a new array
3   for i = 1 to n
4       L[i] = 1
5       P[i] = -1
6   for i = 2 to n
7       for j = 1 to i
8           if( A[j] < A[i] && L[j] + 1 > L[i]
9               L[i] = L[j] + 1
10              P[i] = j
11  return L and P

MAX-SUBSQUEUE-PRINT(A, P, i) // 最开始 i 是使 L(i) 最大的
1   if P[i] < 0
2       return
3   MAX-SUBSQUEUE-PRINT(A, P, P[i])

#+END_EXAMPLE
*** 
暂略

* 最优二叉搜索树(optimal binary search tree)

关键字序列 K, 伪关键字序列 D. K 中元素的搜索概率 $p_i$ 
D 中元素的搜索概率$q_i$, 则
$$\sum_{i=1}^{n}p_i+\sum_{i=0}^{n}q_i=1$$

期望代价
$$E[T]=\sum_{i=1}^{n}(depth(k_i)+1)p_i+\sum_{i=0}^{n}(depth(d_i)+1)q_i=1+\sum_{i=1}^{n}depth(k_i)p_i+\sum_{i=0}^{n}depth(d_i)q_i$$

对于给定的概率集合, 期望搜索代价最小的二叉搜索树称之为最优二叉搜索树

** 最优子结构
若 T 是最优二叉搜索树, T' 是 T 的子树, 则 T' 是最优二叉搜索树
** 递归公式
期望代价 c[i,j], 对应的根 root[i][j]
$$c[i][j]=c[i-1][j]+c[i][j-1]+\omega[i][j]$$

** 伪代码

#+BEGIN_EXAMPLE
OPTIMAL-BST(p, q, n)
1   let e[1...n+1,0...n] and root[1...n,1...n] be new arrays
2   for i = 1 to n+1
3       e[i][i-1] = q[i-1]
4       w[i][i-1] = q[i-1]
5   for l = 1 to n
6       for i = 1 to n - l + 1
7           j = i + l - 1
8           e[i][j] = infty
9           w[i][j]=w[i][j-1]+p[j]+q[j]
10          for k = i to j
11              tmp = e[i][k-1] + e[k+1][j] + w[i][j]
12              if tmp < e[i][j]
13                 e[i][j] = tmp
14                 root[i][j] = k
15  return e and root
#+END_EXAMPLE

** 练习
*** 
#+BEGIN_EXAMPLE
CONSTRUCT-OPTIMAL-BST(root)
1   r = root[1][n]
2   print k_r 为根
3   SUB-CONSTRUCT-OPTIMAL-BST(root, 1, r - 1)
4   SUB-CONSTRUCT-OPTIMAL-BST(root, r + 1, n)

SUB-CONSTRUCT-OPTIMAL-BST(root, i, j)
1   if i <= j
2       r = root[i][j]
3       if r > i
4           c = root[i][r-1]
5           print k_c为k_r 的左孩子
6           SUB-CONSTRUCT-OPTIMAL-BST(root, i, r-1)
7       else
8           print d_{r-1} 为k_r 的左孩子
9       if r < j 
10          c = root[r+1][j]
11          print k_c 为 k_r 的右孩子
12          SUB-CONSTRUCT-OPTIMAL-BST(root, r+1, j)
13      else
14          print d_{r} 为k_r 的右孩子
#+end_EXAMPLE
*** 
| $i$ |    0 |    1 |    2 |    3 |    4 |    5 |    6 |    7 |
|-----+------+------+------+------+------+------+------+------|
| $p_i$ |      | 0.04 | 0.06 | 0.08 | 0.02 | 0.10 | 0.12 | 0.14 |
| $q_i$ | 0.06 | 0.06 | 0.06 | 0.06 | 0.05 | 0.05 | 0.05 | 0.05 |

最优代价 3.1

#+BEGIN_SRC dot :file optimalbst.png :cmdline -Tpng -Kdot
  digraph G{
    k5->k2
    k5->k7
    k2->k1
    k2->k3
    k7->k6
    k7->d7
    k1->d0
    k1->d1
    k3->d2
    k3->k4
    k4->d3
    k4->d4
    k6->d5
    k6->d6
  }
#+END_SRC

#+RESULTS:
[[file:optimalbst.png]]

*** 
还是 $O(n^3)$
*** 
#+begin_example
OPTIMAL-BST(p, q, n)
1   let e[1...n+1,0...n] and root[1...n,1...n] be new arrays
2   for i = 1 to n+1
3       e[i][i-1] = q[i-1]
4       w[i][i-1] = q[i-1]
5   for l = 1 to n
6       for i = 1 to n - l + 1
7           j = i + l - 1
8           e[i][j] = infty
9           w[i][j]=w[i][j-1]+p[j]+q[j]
10          if i > j
11              for k = root[i][j-1] to root[i+1][j]
12                  tmp = e[i][k-1] + e[k+1][j] + w[i][j]
13                  if tmp < e[i][j]
14                     e[i][j] = tmp
15                     root[i][j] = k
16          else 
17              e[i][j]=e[i][j-1]+e[i+1][j]+w[i][j]
18              root[i][j]=i
15  return e and root
#+end_example
* 思考题
** 有向无环图的最长简单路径
   path(v) = max{path(u)+w[u][v]}, d 是所有连入 n 的点, 效率 O(m+n)  m 顶点数, n 边的数
** 最长回文子序列
#+begin_example
LONGEST-PALINDROME(str)
1   l = str.length
2   if l < 2
3       return str
4   let pali[1...l, 0...l] be a new array
5   beg = 1, end = 1
6   for i = 1 to l
7       pali[i][i] = true
8       pali[i][i-1] = true
8   for len = 2 to length
9       for i = 1 to length - len + 1
10          j = i + len - 1
11          if str[i] == str[j] and pali[i+1][j-1]
12              beg = i
13              end = j
14              pali[i][j] = true
15  return str[beg...end]
#+end_example
** 双调欧几里得旅行商问题
将 n 个点按照 x 坐标的大小排序为点序列 $P<p_1,p_2,\cdots,p_n>$,
1. 路径: 定义$p_i$到 $p_j$的路径为$p_i \rightarrow p_1\rightarrow p_j$, 每个点只进行一次. 用 d[i][j] 表示 $p_i\longrightarrow p_j$ 的最短路径. 由于路径的对称性,只考虑 $i \geqslant j$ 的情况
2. 子问题
   1. 若还不是环 $i > j-1$ d[i][j] = d[i-1][j] + distant(i,i-1)
   2. 已经是环 $i==j-1$ d[i][i-1] = min{d[i-1][k]+distant(k,i)} $k \in [1,i-1]$
   3. 计算环  d[i][i] = min{d[i][k]+distant(i,k)}
#+begin_src c -n
  typedef struct {
    int x;
    int y;
  } Point;

  double distance(Point* pots, int i, int j)
  {
    return sqrt((double)pow(pots[i].x - pots[j].x, 2) + pow(pots[i].y - pots[j].y, 2));
  }

  double minBitonicPath(Point* pots, int n, int** pre)
  { // pre[i][j] 保存路径p[i] 到 p[j] 的最右端所连接的点
    if (n < 2) return 0;
    double** length = (double**)malloc(n * sizeof(double*));
    for (int i = 0; i < n; ++i) length[i] = (double*)malloc(sizeof(double) * (i + 1));
    length[1][0] = distance(pots, 1, 0);
    pre[1]       = 0;
    for (int i = 2; i < n; ++i)
    {
      for (int j = 0; j < i - 1; ++j)
      {
        length[i][j] = length[i - 1][j] + distance(pots, i, i - 1);
        pre[i][j]    = i - 1;
      }
      length[i][i - 1] = 1.0 / 0.0;
      for (int k = 0; k < i - 1; ++k)
      {
        double q = length[2][k] + distance(pots, k, i);
        if (q < length[i][i - 1])
        {
          length[i][i - 1] = q;
          pre[i][i - 1]    = k;
        }
      }
    }
    double ret = length[n - 1][n - 2] + distance(pots, n - 1, n - 2);
    for (int i = 0; i < n; ++i) free(length[i]);
    free(length);
    return ret;
  }
#+end_src
** 整齐打印
1. lineCube[i][j] 表示填充 i 到 j 的行的额外空格数的立方
   1. $(M-j+i-\sum\limits_{k=i}^{j}l_k)^3, j < n$
   2. $0, j<n$
2. Cube[i] 表示填充 i 个单词的额外空格立方和, 为了重构打印方式, 用 beg[j] 保存以 j 为结尾行的开始
$$Cube[j] = min\{ Cube[i-1] + lineCube[i][j] \}$$

#+begin_example
NEATLY-PRINT(L, n, W) // L[1..n] 单词的长度
1   let lineExtra[1..n,1..n] and lineCube[1..n,1..n]  be  new 2-D arrays initialise with infinity
2   let Cube[1..n] and beg[1..n] be new arrays
3   for i = 1 to n
4       lineExtra[i][i] = M - l[i]
5       for j = i + 1 to n
6           lineExtra[i][j+1] = lineExtra[i][j-1] - l[j] - 1
7   for j = 1 to n
8       for i = i to j
9           if lineExtra[i][j] < 0
10              lineCube[i][j] = infinity
11          elseif j == n
12              lineCube[i][j] = 0
13          else
14              lineCube[i][j] = lineExtra[i][j]^3
15  Cube[0] = 0
16  for j = 1 to n
17      Cube[j] = MAX
18      for i = 1 to j
19              tmp = cube[i-1] + lineCube[i][j]
20              if tmp < Cube[j]
21                 Cube[j] = tmp
22                 beg[j] = i
23  return Cube and beg

PRINT-WORD-NEATLY(WORDS, beg, n)
1   if n == 0 
2       return 
3   PRINT-WORD-NEATLY(WORDS, beg, beg[n]-1)
4   print "\n"
5   print WORDS[beg[n]...n] with interval space
#+end_example
